name: Autopkg run

on:
  watch:
    types: [started]
  schedule:
    - cron: 00 14 * * 1-5
  workflow_dispatch: # manually triggered
    inputs:
      recipe:
        description: Optional recipe to run (e.g. Firefox.munki.recipe)
        required: false
      debug:
        description: Enable debug
        required: true
        default: 'True'
        type: choice
        options:
        - 'False'
        - 'True'

jobs:
  AutoPkg:
    runs-on: macos-latest
    timeout-minutes: 90 # Keeps your builds from running too long
    env:
      AUTOPKG_SHA256: "b4e8f9e50b429d19658285aa9a93b6fbf6d11c49743f4ee0026011444ef6c8da"
      AUTOPKG_URL: "https://github.com/autopkg/autopkg/releases/download/v2.4.1/autopkg-2.4.1.pkg"
      MUNKI_SHA256: "ba52389db369dd123297bfdf30daf37baba44bf967144382363b3b08ab5fab90"
      MUNKI_URL: "https://github.com/munki/munki/releases/download/v5.6.3/munkitools-5.6.3.4401.pkg"
    steps:
    - name: Checkout AutoPkg recipes
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v3.5.3 Pin SHA1 hash instead of version
      with:
        fetch-depth: 1
    

    - name: Set up Python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 #v5.6.0
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Munki
      run: |
        curl -L ${{ env.MUNKI_URL }} --output /tmp/munkitools.pkg
        echo "${{ env.MUNKI_SHA256 }} */tmp/munkitools.pkg" | shasum -c
        if [[ $? != "0" ]]; then exit 1; fi
        sudo installer -pkg /tmp/munkitools.pkg -target /

    # #####Made by Andrew Kemp-Dahlberg######
    # - name: Build Munki directories
    #   run: |
    #     mkdir -p munki_repo/pkgs
    #     mkdir -p munki_repo/pkgsinfo
    #     mkdir -p munki_repo/icons


    - name: Install AutoPkg
      run: |
        curl -L ${{ env.AUTOPKG_URL }} --output /tmp/autopkg.pkg
        echo "${{ env.AUTOPKG_SHA256 }} */tmp/autopkg.pkg" | shasum -c
        if [[ $? != "0" ]]; then exit 1; fi
        sudo installer -pkg /tmp/autopkg.pkg -target /

    - name: Checkout your Munki LFS repo
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2
      with:
        repository: andrew-kemp-dahlberg/munki # Replace with your Munki repo
        # GitHub deploy key with read/write access to repo
        ssh-key: ${{ secrets.CPE_MUNKI_LFS_DEPLOY_KEY }}
        fetch-depth: 1
        path: munki_repo

    - name: Configure AutoPkg and Git
      run: |
      
        # From Andrew sets recipes and repos dirs and adds repos to AutoPkg index without downloading
        defaults write com.github.autopkg RECIPE_SEARCH_DIRS "$(pwd)"/recipes/
        # defaults write com.github.autopkg RECIPE_REPO_DIR "$(pwd)"/repos/

        # for repo in $(pwd)/repos/*; do
        #   repo_name=$(basename "$repo")
        #   defaults write com.github.autopkg RECIPE_REPOS -dict-add "$repo_name" "$repo"
        # done

        #code from Gusto
        defaults write com.github.autopkg RECIPE_OVERRIDE_DIRS "$(pwd)"/overrides/
        defaults write com.github.autopkg RECIPE_REPO_DIR "$(pwd)"/repos/
        # defaults write com.github.autopkg FAIL_RECIPES_WITHOUT_TRUST_INFO -bool YES
        defaults write com.github.autopkg MUNKI_REPO "$GITHUB_WORKSPACE"/munki_repo
        
        # defaults write com.github.autopkg MUNKI_REPO "$GITHUB_WORKSPACE"/munki
        # defaults write com.github.autopkg MUNKI_REPO $(pwd)/munki/

        defaults write com.github.autopkg GITHUB_TOKEN "${{ secrets.GITHUB_TOKEN }}"
        git config --global user.name "runner"
        git config --global user.email "runner@githubactions.local"

        ## move metadata_cache.json to temp directory for acces from CacheRecipeMetadata.py
        if [ -f codebase/helpers/metadata_cache.json ]; then
          echo "Moving metadata_cache.json to /tmp for access by CacheRecipeMetadata.py"
          mv codebase/helpers/metadata_cache.json /tmp/autopkg_metadata.json
        else
          echo "metadata_cache.json not found in codebase/helpers/"
        fi

    - name: Run makecatalogs
      run: |
        /usr/local/munki/makecatalogs munki_repo  
    


    - name: Run AutoPkg
      run: |

        python3 codebase/autopkg_tools.py --cache -l recipe_list.json
        #### copy metadata to repo ####
        
        # if [ -f pull_request_title ]; then
        # echo "TITLE=$(cat pull_request_title)" >> $GITHUB_ENV
        # echo "BODY<<EOF" >> $GITHUB_ENV
        # cat pull_request_body >> $GITHUB_ENV
        # echo "EOF" >> $GITHUB_ENV
        # fi
      env:
        RECIPE: ${{ github.event.inputs.recipe }}
        SLACK_WEBHOOK_TOKEN: ${{ secrets.SLACK_WEBHOOK_TOKEN }}
     
    # - name: Create Trust Info pull request
    #   if: env.TITLE
    #   run: |
    #     export BRANCH_NAME=trust-info-`date +'%Y-%m-%d'`
    #     git checkout -b $BRANCH_NAME
    #     git add overrides/
    #     git commit -m "${{ env.TITLE }}"
    #     git push --set-upstream origin $BRANCH_NAME
    #     jq -n --arg title "${{ env.TITLE }}" \
    #           --arg body "$BODY" \
    #           --arg head "$BRANCH_NAME" \
    #        '{title: $title, body: $body, head: $head, "base": "${{ github.ref }}"}' | curl -s --request POST \
    #        --url https://api.github.com/repos/${{ github.repository }}/pulls \
    #        --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
    #        --header 'content-type: application/json' \
    #        -d@-


    ###### Added by Andrew Kemp-Dahlberg, built by claude. this whole thing is probably garbage and should be looked at ######
    ##### for debugging purposes, this will print the current working directory and the contents of the codebase/helpers directory #######
    - name: Update Metadata Cache
      run: |
        git config --global user.name "runner"
        git config --global user.email "runner@githubactions.local"
        git fetch origin
        
        # Create a unique branch name with timestamp to avoid conflicts
        export BRANCH_NAME=metadata-cache-$(date +'%Y-%m-%d-%H%M%S')-${{ github.run_number }}
        
        # Check if the metadata file exists
        if [ -f "/tmp/autopkg_metadata.json" ]; then
          echo "metadata_cache.json found at /tmp/autopkg_metadata.json"
          
          # Create branch from the latest main/master
          git checkout -b $BRANCH_NAME origin/${{ github.ref_name }}
          
          # Copy the metadata file to the correct location
          cp /tmp/autopkg_metadata.json ${{ github.workspace }}/codebase/helpers/metadata_cache.json
          
          # Add and commit the file
          git add ${{ github.workspace }}/codebase/helpers/metadata_cache.json
          git commit -m "Update metadata cache - $(date +'%Y-%m-%d %H:%M:%S')"
          
          # Push the branch
          git push origin $BRANCH_NAME
          
          # Create the pull request
          gh pr create \
            --title "Update metadata cache $(date +'%Y-%m-%d %H:%M:%S')" \
            --body "Automated metadata cache update from workflow run #${{ github.run_number }}" \
            --base "${{ github.ref_name }}" \
            --head "$BRANCH_NAME" \
            --fill
          
          # Auto-merge the PR if configured
          gh pr merge --auto --squash --delete-branch
        else
          echo "ERROR: metadata_cache.json not found at /tmp/autopkg_metadata.json"
          echo "Contents of /tmp:"
          ls -la /tmp/ | grep -E "(autopkg|metadata)" || echo "No autopkg-related files found"
          exit 1
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}