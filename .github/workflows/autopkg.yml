name: Autopkg run

on:
  watch:
    types: [started]
  schedule:
    - cron: 00 14 * * 1-5
  workflow_dispatch: # manually triggered
    inputs:
      recipe:
        description: Optional recipe to run (e.g. Firefox.munki.recipe)
        required: false
      debug:
        description: Enable debug
        required: true
        default: 'True'
        type: choice
        options:
        - 'False'
        - 'True'

jobs:
  AutoPkg:
    runs-on: macos-latest
    timeout-minutes: 90 # Keeps your builds from running too long
    env:
      AUTOPKG_SHA256: "b4e8f9e50b429d19658285aa9a93b6fbf6d11c49743f4ee0026011444ef6c8da"
      AUTOPKG_URL: "https://github.com/autopkg/autopkg/releases/download/v2.4.1/autopkg-2.4.1.pkg"
      MUNKI_SHA256: "ba52389db369dd123297bfdf30daf37baba44bf967144382363b3b08ab5fab90"
      MUNKI_URL: "https://github.com/munki/munki/releases/download/v5.6.3/munkitools-5.6.3.4401.pkg"
    steps:
    - name: Checkout AutoPkg recipes
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v3.5.3 Pin SHA1 hash instead of version
      with:
        fetch-depth: 1
    

    - name: Set up Python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 #v5.6.0
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Munki
      run: |
        curl -L ${{ env.MUNKI_URL }} --output /tmp/munkitools.pkg
        echo "${{ env.MUNKI_SHA256 }} */tmp/munkitools.pkg" | shasum -c
        if [[ $? != "0" ]]; then exit 1; fi
        sudo installer -pkg /tmp/munkitools.pkg -target /

    # #####Made by Andrew Kemp-Dahlberg######
    # - name: Build Munki directories
    #   run: |
    #     mkdir -p munki_repo/pkgs
    #     mkdir -p munki_repo/pkgsinfo
    #     mkdir -p munki_repo/icons


    - name: Install AutoPkg
      run: |
        curl -L ${{ env.AUTOPKG_URL }} --output /tmp/autopkg.pkg
        echo "${{ env.AUTOPKG_SHA256 }} */tmp/autopkg.pkg" | shasum -c
        if [[ $? != "0" ]]; then exit 1; fi
        sudo installer -pkg /tmp/autopkg.pkg -target /

    - name: Checkout your Munki LFS repo
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2
      with:
        repository: andrew-kemp-dahlberg/munki # Replace with your Munki repo
        # GitHub deploy key with read/write access to repo
        ssh-key: ${{ secrets.CPE_MUNKI_LFS_DEPLOY_KEY }}
        fetch-depth: 1
        path: munki_repo

    - name: Configure AutoPkg and Git
      run: |
        ##### From Andrew Kemp-Dahlberg #####
        # Will likely be removed in the future, but for now, this is how I set up AutoPkg #####
        # defaults write com.github.autopkg RECIPE_REPO_DIR "$(pwd)"/repos/

        # for repo in $(pwd)/repos/*; do
        #   repo_name=$(basename "$repo")
        #   defaults write com.github.autopkg RECIPE_REPOS -dict-add "$repo_name" "$repo"
        # done

        # From Andrew sets recipes and repos dirs and adds repos to AutoPkg index without downloading
        defaults write com.github.autopkg RECIPE_SEARCH_DIRS "$(pwd)"/recipes/
        
        #code from Gusto
        defaults write com.github.autopkg RECIPE_OVERRIDE_DIRS "$(pwd)"/overrides/
        defaults write com.github.autopkg RECIPE_REPO_DIR "$(pwd)"/repos/
        # defaults write com.github.autopkg FAIL_RECIPES_WITHOUT_TRUST_INFO -bool YES
        defaults write com.github.autopkg MUNKI_REPO "$GITHUB_WORKSPACE"/munki_repo
        defaults write com.github.autopkg GITHUB_TOKEN "${{ secrets.GITHUB_TOKEN }}"
        git config --global user.name "runner"
        git config --global user.email "runner@githubactions.local"

#### By andrew. It may be cleaner to edit this directly in CacheRecipeMetadata.py ####
    - name: Copy metadata cache to temp directory
      run: |
        ## move metadata_cache.json to temp directory for acces from CacheRecipeMetadata.py
        if [ -f codebase/helpers/metadata_cache.json ]; then
          echo "Moving metadata_cache.json to /tmp for access by CacheRecipeMetadata.py"
          mv codebase/helpers/metadata_cache.json /tmp/autopkg_metadata.json
        else
          echo "metadata_cache.json not found in codebase/helpers/"
        fi

    - name: Run makecatalogs
      run: |
        /usr/local/munki/makecatalogs munki_repo  
    


    - name: Run AutoPkg
      run: |

        python3 codebase/autopkg_tools.py --cache --list recipe_list.json --icons
      env:
        RECIPE: ${{ github.event.inputs.recipe }}
        SLACK_WEBHOOK_TOKEN: ${{ secrets.SLACK_WEBHOOK_TOKEN }}
        DEBUG: ${{ github.event.inputs.debug }}
     
    # - name: Create Trust Info pull request
    #   if: env.TITLE
    #   run: |
    #     export BRANCH_NAME=trust-info-`date +'%Y-%m-%d'`
    #     git checkout -b $BRANCH_NAME
    #     git add overrides/
    #     git commit -m "${{ env.TITLE }}"
    #     git push --set-upstream origin $BRANCH_NAME
    #     jq -n --arg title "${{ env.TITLE }}" \
    #           --arg body "$BODY" \
    #           --arg head "$BRANCH_NAME" \
    #        '{title: $title, body: $body, head: $head, "base": "${{ github.ref }}"}' | curl -s --request POST \
    #        --url https://api.github.com/repos/${{ github.repository }}/pulls \
    #        --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
    #        --header 'content-type: application/json' \
    #        -d@-


    ###### Added by Andrew Kemp-Dahlberg, built by claude. this whole thing is probably garbage and should be looked at ######
    ##### for debugging purposes, this will print the current working directory and the contents of the codebase/helpers directory #######
    - name: Check if metadata was generated
      id: check_metadata
      run: |
        if [ -f "/tmp/autopkg_metadata.json" ]; then
          echo "metadata_exists=true" >> $GITHUB_OUTPUT
          echo "Metadata file size: $(stat -f%z /tmp/autopkg_metadata.json) bytes"
        else
          echo "metadata_exists=false" >> $GITHUB_OUTPUT
          echo "No metadata file generated"
        fi
    
    - name: Commit and push metadata cache
      if: steps.check_metadata.outputs.metadata_exists == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Use the enhanced script from above
        bash scripts/commit_metadata_cache.sh
    
    - name: Handle commit failure
      if: failure() && steps.check_metadata.outputs.metadata_exists == 'true'
      run: |
        echo "::warning::Failed to commit metadata cache"
        echo "Attempting to save as artifact instead..."
    
    - name: Upload metadata as artifact (fallback)
      if: failure() && steps.check_metadata.outputs.metadata_exists == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: metadata-cache-${{ github.run_number }}
        path: /tmp/autopkg_metadata.json
        retention-days: 7
    
    - name: Notify on complete failure
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          // Create an issue if the workflow fails completely
          const title = `Metadata Cache Update Failed - Run #${context.runNumber}`;
          const body = `The automated metadata cache update failed.
          
          **Details:**
          - Workflow Run: [#${context.runNumber}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
          - Time: ${new Date().toISOString()}
          - Actor: ${context.actor}
          
          Please check the workflow logs for details.`;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['bug', 'automation']
          });